{"id": "1", "input": "<s> count = 0\\n for i in range(0,len(s),2):\\n if", "gt": "s[i] in \\\"AEIOU\\\":\\n count += 1\\n return count\\n </s>"}
{"id": "2", "input": "<s> from math import floor, ceil\\n\\n if value.count('.') == 1:\\n # remove trailing zeros\\n while (value[-1] == '0'):\\n value = value[:-1]\\n\\n num = float(value)\\n if value[-2:]", "gt": "== '.5':\\n if num > 0:\\n res = ceil(num)\\n else:\\n res = floor(num)\\n elif len(value) > 0:\\n res = int(round(num))\\n else:\\n res = 0\\n\\n return res\\n\\n </s>"}
{"id": "3", "input": "<s> return [n + 2*i", "gt": "for i in range(n)]\\n </s>"}
{"id": "4", "input": "<s> if not s:\\n return []\\n\\n s_list = []\\n\\n for letter in s:\\n", "gt": "if letter == ',':\\n s_list.append(' ')\\n else:\\n s_list.append(letter)\\n\\n s_list = \\\"\\\".join(s_list)\\n return s_list.split()\\n </s>"}
{"id": "5", "input": "<s> if x > y:\\n return -1\\n if y % 2 == 0:\\n", "gt": "return y\\n if x == y:\\n return -1\\n return y - 1\\n </s>"}
{"id": "6", "input": "<s> if m < n:\\n return -1\\n summation = 0\\n for i", "gt": "in range(n, m+1):\\n summation += i\\n return bin(round(summation/(m - n + 1)))\\n </s>"}
{"id": "7", "input": "<s> odd_digit_elements = []\\n for i in x:\\n if all (int(c)", "gt": "% 2 == 1 for c in str(i)):\\n odd_digit_elements.append(i)\\n return sorted(odd_digit_elements)\\n </s>"}
{"id": "8", "input": "<s> dic = {\\n 1: \\\"One\\\",\\n 2: \\\"Two\\\",\\n 3: \\\"Three\\\",\\n 4: \\\"Four\\\",\\n 5: \\\"Five\\\",\\n 6: \\\"Six\\\",\\n 7: \\\"Seven\\\",\\n 8: \\\"Eight\\\",\\n", "gt": "9: \\\"Nine\\\",\\n }\\n sorted_arr = sorted(arr, reverse=True)\\n new_arr = []\\n for var in sorted_arr:\\n try:\\n new_arr.append(dic[var])\\n except:\\n pass\\n return new_arr\\n </s>"}
{"id": "9", "input": "<s> ret = []\\n for i in range(1,n+1):\\n if i%2 == 0:\\n x = 1\\n for j in range(1,i+1): x *=", "gt": "j\\n ret += [x]\\n else:\\n x = 0\\n for j in range(1,i+1): x += j\\n ret += [x]\\n return ret\\n </s>"}
{"id": "10", "input": "<s> def is_palindrome(n):\\n return str(n) == str(n)[::-1]\\n\\n even_palindrome_count = 0\\n odd_palindrome_count = 0\\n\\n for i in range(1, n+1):\\n if i%2", "gt": "== 1 and is_palindrome(i):\\n odd_palindrome_count += 1\\n elif i%2 == 0 and is_palindrome(i):\\n even_palindrome_count += 1\\n return (even_palindrome_count, odd_palindrome_count)\\n </s>"}
{"id": "11", "input": "<s> def digits_sum(n):\\n neg = 1\\n if n < 0: n, neg = -1 * n, -1 \\n n = [int(i) for", "gt": "i in str(n)]\\n n[0] = n[0] * neg\\n return sum(n)\\n return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\\n </s>"}
{"id": "12", "input": "<s> if len(arr)==0:\\n return True\\n sorted_array=sorted(arr)\\n my_arr=[]\\n \\n min_value=min(arr)\\n min_index=arr.index(min_value)\\n my_arr=arr[min_index:]+arr[0:min_index]\\n", "gt": "for i in range(len(arr)):\\n if my_arr[i]!=sorted_array[i]:\\n return False\\n return True\\n </s>"}
{"id": "13", "input": "<s> odd = 0\\n even = 0\\n for i in lst1:\\n if i%2 == 1:\\n odd += 1\\n for", "gt": "i in lst2:\\n if i%2 == 0:\\n even += 1\\n if even >= odd:\\n return \\\"YES\\\"\\n return \\\"NO\\\"\\n \\n </s>"}
{"id": "14", "input": "<s> dict1={}\\n list1=test.split(\\\" \\\")\\n t=0\\n\\n for i in list1:\\n if(list1.count(i)>t) and i!='':\\n", "gt": "t=list1.count(i)\\n if t>0:\\n for i in list1:\\n if(list1.count(i)==t):\\n \\n dict1[i]=t\\n return dict1\\n </s>"}
{"id": "15", "input": "<s> s = ''.join([char for char in s if", "gt": "char not in c])\\n return (s,s[::-1] == s)\\n </s>"}
{"id": "16", "input": "<s> res = []\\n for arr in lst:\\n n = sum(int(d)%2==1 for d in arr)\\n res.append(\\\"the number of odd elements", "gt": "\\\" + str(n) + \\\"n the str\\\"+ str(n) +\\\"ng \\\"+ str(n) +\\\" of the \\\"+ str(n) +\\\"nput.\\\")\\n return res\\n </s>"}
{"id": "17", "input": "<s> max_sum = 0\\n s = 0\\n for num in nums:\\n s += -num\\n if (s < 0):\\n s = 0\\n", "gt": "max_sum = max(s, max_sum)\\n if max_sum == 0:\\n max_sum = max(-i for i in nums)\\n min_sum = -max_sum\\n return min_sum\\n </s>"}
{"id": "18", "input": "<s> return sum([math.ceil(sum(arr)/capacity) for", "gt": "arr in grid])\\n </s>"}
{"id": "19", "input": "<s> return sorted(sorted(arr),", "gt": "key=lambda x: bin(x)[2:].count('1'))\\n </s>"}
{"id": "20", "input": "<s> result = []\\n for word in s.split():\\n n_consonants = 0\\n for i in range(0, len(word)):\\n", "gt": "if word[i].lower() not in [\\\"a\\\",\\\"e\\\",\\\"i\\\",\\\"o\\\",\\\"u\\\"]:\\n n_consonants += 1 \\n if n_consonants == n:\\n result.append(word)\\n return result\\n\\n </s>"}
{"id": "21", "input": "<s> if len(word) < 3:\\n return \\\"\\\"\\n\\n vowels = {\\\"a\\\", \\\"e\\\", \\\"i\\\", \\\"o\\\", \\\"u\\\", \\\"A\\\", \\\"E\\\", 'O', 'U', 'I'}\\n for i in", "gt": "range(len(word)-2, 0, -1):\\n if word[i] in vowels:\\n if (word[i+1] not in vowels) and (word[i-1] not in vowels):\\n return word[i]\\n return \\\"\\\"\\n </s>"}
{"id": "22", "input": "<s> def check(s):\\n val = 0\\n for i in s:\\n if i == '(':\\n val = val + 1\\n else:\\n val = val - 1\\n if val < 0:\\n", "gt": "return False\\n return True if val == 0 else False\\n\\n S1 = lst[0] + lst[1]\\n S2 = lst[1] + lst[0]\\n return 'Yes' if check(S1) or check(S2) else 'No'\\n </s>"}
{"id": "23", "input": "<s> if k == 0:\\n return []\\n", "gt": "arr.sort()\\n ans = arr[-k:]\\n return ans\\n </s>"}
{"id": "24", "input": "<s> return sum([x for idx, x", "gt": "in enumerate(lst) if idx%2==0 and x%2==1])\\n </s>"}
{"id": "25", "input": "<s> return sum(elem for elem in", "gt": "arr[:k] if len(str(elem)) <= 2)\\n </s>"}
{"id": "26", "input": "<s> if n%2==0:\\n odd_collatz = [] \\n else:\\n odd_collatz = [n]\\n while n > 1:\\n if n % 2", "gt": "== 0:\\n n = n/2\\n else:\\n n = n*3 + 1\\n \\n if n%2 == 1:\\n odd_collatz.append(int(n))\\n\\n return sorted(odd_collatz)\\n </s>"}
{"id": "27", "input": "<s> try:\\n date = date.strip()\\n month, day, year = date.split('-')\\n month, day, year = int(month), int(day), int(year)\\n if month < 1 or month > 12:\\n return False\\n if month in [1,3,5,7,8,10,12] and day < 1 or day", "gt": "> 31:\\n return False\\n if month in [4,6,9,11] and day < 1 or day > 30:\\n return False\\n if month == 2 and day < 1 or day > 29:\\n return False\\n except:\\n return False\\n\\n return True\\n </s>"}
{"id": "28", "input": "<s> if \\\" \\\" in txt:\\n return txt.split()\\n elif \\\",\\\" in txt:\\n return txt.replace(',','", "gt": "').split()\\n else:\\n return len([i for i in txt if i.islower() and ord(i)%2 == 0])\\n </s>"}
{"id": "29", "input": "<s> count_digit = dict([(i, 0) for i in lst])\\n for i in lst:\\n count_digit[i]+=1 \\n if any(count_digit[i] > 2 for i", "gt": "in lst):\\n return False\\n if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\\n return True\\n else:\\n return False\\n \\n \\n </s>"}
{"id": "30", "input": "<s> def is_prime(num):\\n if num == 1 or num == 0:\\n return False\\n if num == 2:\\n return True\\n for i in range(2, num):\\n if num%i == 0:\\n", "gt": "return False\\n return True\\n\\n l = max(interval1[0], interval2[0])\\n r = min(interval1[1], interval2[1])\\n length = r - l\\n if length > 0 and is_prime(length):\\n return \\\"YES\\\"\\n return \\\"NO\\\"\\n </s>"}
{"id": "31", "input": "<s> if not arr: return None\\n prod = 0 if 0 in arr else (-1)", "gt": "** len(list(filter(lambda x: x < 0, arr)))\\n return prod * sum([abs(i) for i in arr])\\n </s>"}
{"id": "32", "input": "<s> n = len(grid)\\n val = n * n + 1\\n for i in range(n):\\n for j in range(n):\\n if grid[i][j] == 1:\\n temp = []\\n if i != 0:\\n temp.append(grid[i - 1][j])\\n\\n if j != 0:\\n temp.append(grid[i][j - 1])\\n\\n", "gt": "if i != n - 1:\\n temp.append(grid[i + 1][j])\\n\\n if j != n - 1:\\n temp.append(grid[i][j + 1])\\n\\n val = min(temp)\\n\\n ans = []\\n for i in range(k):\\n if i % 2 == 0:\\n ans.append(1)\\n else:\\n ans.append(val)\\n return ans\\n </s>"}
{"id": "33", "input": "<s> if n == 0:\\n return [1]\\n my_tri = [1, 3]\\n for i in range(2, n + 1):\\n if i % 2 ==", "gt": "0:\\n my_tri.append(i / 2 + 1)\\n else:\\n my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\n return my_tri\\n </s>"}
{"id": "34", "input": "<s> product = 1\\n odd_count = 0\\n for digit in str(n):\\n int_digit = int(digit)\\n if", "gt": "int_digit%2 == 1:\\n product= product*int_digit\\n odd_count+=1\\n if odd_count ==0:\\n return 0\\n else:\\n return product\\n </s>"}
{"id": "35", "input": "<s> opening_bracket_index = []\\n closing_bracket_index = []\\n for i in range(len(string)):\\n if string[i] == '[':\\n opening_bracket_index.append(i)\\n else:\\n closing_bracket_index.append(i)\\n closing_bracket_index.reverse()\\n cnt = 0\\n i = 0\\n l", "gt": "= len(closing_bracket_index)\\n for idx in opening_bracket_index:\\n if i < l and idx < closing_bracket_index[i]:\\n cnt += 1\\n i += 1\\n return cnt >= 2\\n\\n \\n </s>"}
{"id": "36", "input": "<s> import math\\n squared = 0\\n for i", "gt": "in lst:\\n squared += math.ceil(i)**2\\n return squared\\n </s>"}
{"id": "37", "input": "<s> \\n check = txt.split(' ')[-1]\\n return True if len(check)", "gt": "== 1 and (97 <= ord(check.lower()) <= 122) else False\\n </s>"}
{"id": "38", "input": "<s> ind=-1\\n i=1\\n while i<len(arr):\\n if", "gt": "arr[i]<arr[i-1]:\\n ind=i\\n i+=1\\n return ind\\n </s>"}
{"id": "39", "input": "<s> smallest = list(filter(lambda x: x < 0, lst))\\n largest = list(filter(lambda x: x", "gt": "> 0, lst))\\n return (max(smallest) if smallest else None, min(largest) if largest else None)\\n </s>"}
{"id": "40", "input": "<s> temp_a, temp_b = a, b\\n if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\\n if isinstance(temp_b, str): temp_b =", "gt": "temp_b.replace(',','.')\\n if float(temp_a) == float(temp_b): return None\\n return a if float(temp_a) > float(temp_b) else b \\n </s>"}
{"id": "41", "input": "<s> return n%2 == 0", "gt": "and n >= 8\\n </s>"}
{"id": "42", "input": "<s> fact_i = 1\\n special_fact = 1\\n for i in", "gt": "range(1, n+1):\\n fact_i *= i\\n special_fact *= fact_i\\n return special_fact\\n </s>"}
{"id": "43", "input": "<s> new_text = \\\"\\\"\\n i = 0\\n start, end = 0, 0\\n while i < len(text):\\n if text[i] == \\\" \\\":\\n end += 1\\n else:\\n if end - start > 2:\\n new_text += \\\"-\\\"+text[i]\\n elif end - start", "gt": "> 0:\\n new_text += \\\"_\\\"*(end - start)+text[i]\\n else:\\n new_text += text[i]\\n start, end = i+1, i+1\\n i+=1\\n if end - start > 2:\\n new_text += \\\"-\\\"\\n elif end - start > 0:\\n new_text += \\\"_\\\"\\n return new_text\\n </s>"}
{"id": "44", "input": "<s> suf = ['txt', 'exe', 'dll']\\n lst = file_name.split(sep='.')\\n if len(lst) != 2:\\n return 'No'\\n if not lst[1] in suf:\\n return 'No'\\n if len(lst[0]) ==", "gt": "0:\\n return 'No'\\n if not lst[0][0].isalpha():\\n return 'No'\\n t = len([x for x in lst[0] if x.isdigit()])\\n if t > 3:\\n return 'No'\\n return 'Yes'\\n </s>"}
{"id": "45", "input": "<s> result =[]\\n for i in range(len(lst)):\\n if i %3 == 0:\\n result.append(lst[i]**2)\\n elif", "gt": "i % 4 == 0 and i%3 != 0:\\n result.append(lst[i]**3)\\n else:\\n result.append(lst[i])\\n return sum(result)\\n </s>"}
{"id": "46", "input": "<s> new_lst = []\\n for word in sentence.split():\\n flg = 0\\n if len(word) == 1:\\n flg = 1\\n for i in", "gt": "range(2, len(word)):\\n if len(word)%i == 0:\\n flg = 1\\n if flg == 0 or len(word) == 2:\\n new_lst.append(word)\\n return \\\" \\\".join(new_lst)\\n </s>"}
{"id": "47", "input": "<s> a, b = x.split(\\\"/\\\")\\n c, d = n.split(\\\"/\\\")\\n numerator = int(a) * int(c)\\n", "gt": "denom = int(b) * int(d)\\n if (numerator/denom == int(numerator/denom)):\\n return True\\n return False\\n </s>"}
{"id": "48", "input": "<s> def digits_sum(n):\\n neg = 1\\n if n < 0: n, neg = -1 * n, -1 \\n", "gt": "n = [int(i) for i in str(n)]\\n n[0] = n[0] * neg\\n return sum(n)\\n return sorted(nums, key=digits_sum)\\n </s>"}
{"id": "49", "input": "<s> \\n count = 0\\n for num in nums:\\n if num > 10:\\n odd_digits = (1, 3, 5, 7,", "gt": "9)\\n number_as_string = str(num)\\n if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\\n count += 1\\n \\n return count \\n </s>"}
{"id": "50", "input": "<s> A = [i*i - i + 1 for i in range(1,n+1)]\\n ans = []\\n for i in", "gt": "range(n):\\n for j in range(i+1,n):\\n for k in range(j+1,n):\\n if (A[i]+A[j]+A[k])%3 == 0:\\n ans += [(A[i],A[j],A[k])]\\n return len(ans)\\n </s>"}
{"id": "51", "input": "<s> planet_names = (\\\"Mercury\\\", \\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\", \\\"Neptune\\\")\\n if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\\n", "gt": "return ()\\n planet1_index = planet_names.index(planet1)\\n planet2_index = planet_names.index(planet2)\\n if planet1_index < planet2_index:\\n return (planet_names[planet1_index + 1: planet2_index])\\n else:\\n return (planet_names[planet2_index + 1 : planet1_index])\\n </s>"}
{"id": "52", "input": "<s> lst.sort()\\n new_lst = []\\n for i in lst:\\n", "gt": "if len(i)%2 == 0:\\n new_lst.append(i)\\n return sorted(new_lst, key=len)\\n </s>"}
{"id": "53", "input": "<s> if n == 1:\\n return y\\n for i in range(2, n):\\n", "gt": "if n % i == 0:\\n return y\\n break\\n else:\\n return x\\n </s>"}
{"id": "54", "input": "<s> return sum([i**2 for i in lst if i", "gt": "> 0 and i%2!=0 and \\\".\\\" not in str(i)])\\n </s>"}
{"id": "55", "input": "<s> return [abs(x-y) for", "gt": "x,y in zip(game,guess)]\\n </s>"}
{"id": "56", "input": "<s> strong = extensions[0]\\n my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\\n for s in extensions:\\n val = len([x for x in", "gt": "s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\\n if val > my_val:\\n strong = s\\n my_val = val\\n\\n ans = class_name + \\\".\\\" + strong\\n return ans\\n\\n </s>"}
{"id": "57", "input": "<s> l = len(b)\\n pat = b + b\\n for i in range(len(a) - l +", "gt": "1):\\n for j in range(l + 1):\\n if a[i:i+l] == pat[j:j+l]:\\n return True\\n return False\\n </s>"}
{"id": "58", "input": "<s> even_count = 0\\n odd_count = 0\\n for i in str(abs(num)):\\n", "gt": "if int(i)%2==0:\\n even_count +=1\\n else:\\n odd_count +=1\\n return (even_count, odd_count)\\n </s>"}
{"id": "59", "input": "<s> num = [1, 4, 5, 9, 10, 40, 50, 90, \\n 100, 400, 500, 900, 1000] \\n sym = [\\\"I\\\", \\\"IV\\\", \\\"V\\\", \\\"IX\\\", \\\"X\\\", \\\"XL\\\", \\n \\\"L\\\", \\\"XC\\\", \\\"C\\\", \\\"CD\\\", \\\"D\\\", \\\"CM\\\", \\\"M\\\"] \\n", "gt": "i = 12\\n res = ''\\n while number: \\n div = number // num[i] \\n number %= num[i] \\n while div: \\n res += sym[i] \\n div -= 1\\n i -= 1\\n return res.lower()\\n </s>"}
{"id": "60", "input": "<s> return a*a == b*b + c*c or b*b ==", "gt": "a*a + c*c or c*c == a*a + b*b\\n </s>"}
{"id": "61", "input": "<s> return sorted(words, key =", "gt": "lambda x: (-len(set(x)), x))[0]\\n </s>"}
{"id": "62", "input": "<s> if(need <= remaining):\\n return [ number + need ,", "gt": "remaining-need ]\\n else:\\n return [ number + remaining , 0]\\n </s>"}
{"id": "63", "input": "<s> expression = str(operand[0])\\n for oprt, oprn in", "gt": "zip(operator, operand[1:]):\\n expression+= oprt + str(oprn)\\n return eval(expression)\\n </s>"}
{"id": "64", "input": "<s> flg = 0\\n idx = 0\\n new_str = list(s)\\n for i in s:\\n if i.isalpha():\\n new_str[idx] = i.swapcase()\\n flg = 1\\n", "gt": "idx += 1\\n s = \\\"\\\"\\n for i in new_str:\\n s += i\\n if flg == 0:\\n return s[len(s)::-1]\\n return s\\n </s>"}
{"id": "65", "input": "<s> import hashlib\\n return hashlib.md5(text.encode('ascii')).hexdigest()", "gt": "if text else None\\n </s>"}
{"id": "66", "input": "<s> lower = max(2, min(a, b))\\n upper = min(8, max(a, b))\\n\\n return", "gt": "[i for i in range(lower, upper+1) if i % 2 == 0]\\n </s>"}
